#!/usr/bin/env perl 

use strict;
use warnings;
use Pod::Usage;

binmode STDOUT, ":utf8";

# load the libwww module with cookies
use WWW::Mechanize;

# load the Getopt::Long module for cli arguments
use Getopt::Long;

# load the Pod::Usage module for automatic documentation
use Pod::Usage;

# GLOBAL VARIABLES
#-------------------------------------------------------------------------------
my $hostname    = undef;    # this has to be a cli argument
my $help        = undef;
my $debug       = undef;
my $user        = undef || "supervisor";
my $password    = undef || "up6!z.nl";

#-------------------------------------------------------------------------------
# process cli arguments
#-------------------------------------------------------------------------------
Getopt::Long::Configure( "no_ignore_case", "bundling" );
GetOptions(
    'H|hostname=s'  => \$hostname,
    'h|help|?'      => \$help,
    'v|verbose'     => \$debug,
    'u|user=s'      => \$user,
    'p|password=s'  => \$password,
);

# if help chosen, display it
pod2usage( -verbose => 2, -noperldoc => 1, ) if $help;

# if no -H specified, show usage
pod2usage( -verbose => 2, -noperldoc => 1, ) unless $hostname;

# create mechanize object, save cookies in memory
# do not use autocheck = 1, othewise on errors the script just stops
my $mech = WWW::Mechanize->new(
    cookiejar   => {},
    ssl_opts    => { SSL_version => 'SSLv3', verify_hostname => 0 },
    autocheck   => 0,
);

if ( defined $debug ) {
    $mech->show_progress(1);
}


$mech->get( "https://$hostname" ) ;

# due to different firmware versions, sometimes we get a pop-up asking for
# authentication instead of a form in the site. (this is why autocheck needs
# to be turned off

# if the pop up turns up, this is then basic auth
if ( $mech->status() == 401 ) {
    #$mech->credentials( "sa_nagios", "nagiosrules") ;
    $mech->credentials( "$user", "$password") ;
    $mech->get( "https://$hostname/upsstat.htm" ) ;
    parse_text();
}

# otherwise, just fill in the form
else {
    $mech->get( "https://$hostname" ) ;
    # login, there is just one form
    $mech->submit_form(
        form_number     => 1,
        fields          => { login_username => $user,
                             login_password => $password,
        },
     );

    parse_text();
};


sub parse_text {
    # save the website text in $text. This will be a very long string
    my $text = $mech->text();

    if ( defined $debug) {
        print "This is the content of the site after logging in: \n";
        print $text;
        print "\n";

}

# parse $text. If we find the text 'critical alarm.' then we report the error
# to nagios. We are interested in the text from 'Critical Alarm(s) up to the
# first dot followed by an empty space (there may be several critical alarms)

    if ( $text =~ /.*(critical alarm.*?)\.\s.*/i ) {
        my $message = $1;
        print "WARNING: $message\n";
        exit 1;
    }
    elsif ( $text =~ /.*(no alarms present)./i) {
        my $message = $1;
        print "OK: $message\n";
        exit 0;
    }
    return ;
} ## --- end sub parse_text



#-------------------------------------------------------------------------------
#  Plain Old Documentation
#-------------------------------------------------------------------------------
=head1 NAME

check_ups_http - check web interface APC ups for critical alerts

=head1 VERSION

This documentation referst to <check_ups_http> version 0.1

=head1 SYNOPSIS
check_ups_http -H host [-v -u username -p password]

=head1 REQUIRED ARGUMENTS
-H | --hostname: ip address/dns hostname of nic we want to monitor

=head1 SWITCHES

-H | --hostname  the ip address/hostname of the ups we want to monitor

-v | --verbose   display extra debugging info

-u | --user      specify user to login the ups (default: see 'Global
variables' in script source)

-p | --password  specify password (default: see 'Global variables' in script
source) 

-h | --help      this text

=head1 DESCRIPTION
nagios check to monitor the hardware health of apc ups units. This used to be
possible from snmp, but no longer the case. The script logs in the web
interface and parses its content looking for alarms.

=head1 REQUIREMENTS
This scripts requires the Perl WWW::Mechanize and Crypt::SSLeay modules.

=head1 SEEALSO
In the code, section 'Global Variables', I have hardcoded the user/password
combination to login the web interface.

=head1 AUTHOR
Jos√© Asenjo

=head1 LICENCE AND COPYRIGHT

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perldoc perlartistic.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut
